name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  GO_VERSION: '1.23'
  GOLANGCI_LINT_VERSION: 'v1.55.2'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Download dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage artifact
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html
        retention-days: 30

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build for Linux
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o axon-linux-amd64 .
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-w -s" -o axon-linux-arm64 .
    
    - name: Build for macOS
      run: |
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o axon-macos-amd64 .
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o axon-macos-arm64 .
    
    - name: Build for Windows
      run: |
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o axon-windows-amd64.exe .
        CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="-w -s" -o axon-windows-arm64.exe .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: axon-binaries
        path: axon-*
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
    
    - name: Run Nancy vulnerability scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: axon-binaries
    
    - name: Make binary executable
      run: chmod +x axon-linux-amd64
    
    - name: Run integration tests
      run: |
        # Test binary execution
        ./axon-linux-amd64 --help || true
        
        # Test with mock AI responses (if offline mode exists)
        export AXON_OFFLINE=true
        timeout 10s ./axon-linux-amd64 || true
    
    - name: Test terminal compatibility
      run: |
        # Test with different terminal sizes
        COLUMNS=80 LINES=24 ./axon-linux-amd64 --help || true
        COLUMNS=120 LINES=40 ./axon-linux-amd64 --help || true

